# DEVELOPER FUNDAMENTALS 1

# name = input ('what is your name? ')
# print (name+' is the king')
# print(type(-1))
# 2**2 mean 2 raised to power 2
# type() would return the class and dtata type like type 2 retuns class int
# print (2*3) #* 
# print (2**3) #**  
# print (8/4) # / would return a floating result 
# print (8//4) # //returns the answer rounded down to an integer
# print (6%4) # % modulo returns remainder of devision 6%4=2  
# print(round (4.1)) # rounds to closest integer
# print(abs(-20)) #abs return absolute value 
# PRECEDENCE (), **, * / , + -
# print(bin(2)) # returns binary for integers. 
# print (int(0b10)) # returns from bases  to integer. f. integer(base,number)
# a,b,c = 1,2,3 # a quick way to asign values is by using commas. 1,2,3=a,b,c

#SYNTAX
.Title(): recognizes everything as a title, ada,Ada,ADA aDa would all return as Ada, is string is more than one word. It only capitalizes the first word

name='chisom'
last='ohazurike'
morn_text='Hello {} {}. welcome'
print((morn_text).format(name.title(),last.title()))

.lower(): always convert inputs to lower before working with it. Users might capitalize here and there
.strip(): takes away spaces in strings (rstrip and lstrip helps takes out the space from the left and right side, if youre sure where it is)

\t : tab space
\n: next new line



#constants  #use this section to state fixed constants that no one should change



# sorted(x): sorts list without modyfyinf the original list 
#----------------------
#   METHODS
#----------------------
# .insert(x,y): helps inserts element y in position x
# .extend([x.y]): adds elements x, and y into what ever list calling the extends
# .pop() : pops out the last element, if an index is called, it removes the index instead
# .remove :takes out what ever value is asked to be removed. remove(4) would remove element 4 if available
# .clear(): removes everything in the list
# .count(x): counts the number of time apple appear in a list
# .index(x) : tells what position x is at on a list 
# .sort() :arranges list in order from small to bigg 
# 
#----------------------------
# DICTIONARY vs LISTs
#---------------------------
# LISTS are easily ordered and sorted, but dictionaries are not 
dict have Key: and Values inside curly brackets, dicts are not ordered in memory like in lists where 1 and 2 is known
#dict# a={1:[2,4,5,6],'c':True, 'a'='hello' }
#List# 
#note thst every entery could be a list or string or whasteber
#thewy are called by side by side, eg to call 5 we print  a[0][1][2]
#dictionaries hold more information, dont work for ordinal data set, they are categorical.
# dictionary keys need to be immutable, cannot change, numbers, booleans, string can be keys in dicts but not list cause lists can change(not immutable)
# Key Error means no key exists. 
to Grab from dict, use .key,.value, and .item: to grab keys 
NOTES
# WE DONT WANT ERRORS in python so if were looking to see if a key exists. we use .get[] instead of calling that get 
or you can just say print (key in dict): eg. print (1 in a) or print (2 in a) would return true and false, to check for values run
# CALL AND IF MISSING USE THIS in example  print (a.get(2:'take me')): this would check for key 2, if it doesnt exists use 'take me'
# a.keys(): checks 
#---------------
# TUPLE
#---------------
#	Lists that are made immutable
#	A=(1,2,3,5)

#----------------------
# ERRORS
# ----------------------

